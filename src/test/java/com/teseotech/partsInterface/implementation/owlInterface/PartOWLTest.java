package com.teseotech.partsInterface.implementation.owlInterface;

import com.teseotech.partsInterface.coreInterface.KernelInterface;
import com.teseotech.partsInterface.coreInterface.PartInterface;
import com.teseotech.partsInterface.implementation.kernelEvaluation.KernelPoint;
import com.teseotech.partsInterface.implementation.partEvaluation.Part;
import com.teseotech.partsInterface.utility.LoggerInterface;
import it.emarolab.amor.owlInterface.OWLReferences;
import it.emarolab.owloop.core.Axiom;
import org.junit.jupiter.api.Test;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;

class PartOWLTest {  // It tests the definition of a `Part` in the ontology.
    static OWLReferences createOntology() {
        LoggerInterface.configure(Level.FINE);
        Axiom.Descriptor.OntologyReference.activateAMORlogging(false); // Disabling OWLOOP and aMOE logs.
        // Creating a reference to a new ontology.
        String testName = "PartTest";
        return Axiom.Descriptor.OntologyReference.newOWLReferencesCreatedWithPellet(
                testName,
                "src/test/resources/testOntology/" + testName + ".owl",
                "http://www.semanticweb.org/" + testName,
                true
        );
    }

    private Set<KernelInterface<?,?>> getKernels(OWLReferences ontoRef) {
        // Define some features (shared to all parts for simplicity).
        Set<KernelInterface<?,?>> kernels = new HashSet<>();
        kernels.add(new KernelPoint("hasFeature1", 1, ontoRef));
        kernels.add(new KernelPoint("hasFeature2", 2L, ontoRef));
        kernels.add(new KernelPoint("hasFeature3", 3f, ontoRef));
        return kernels;
    }

    @Test
    void addRemovePart() {
        OWLReferences ontology = createOntology();
        Set<KernelInterface<?, ?>> kernels = getKernels(ontology);

        // Define some parts with autogenerated ID. They might add features (see check logs).
        PartInterface p0 = new Part("MOTOR", kernels, ontology);
        PartInterface p1 = new Part("MOTOR", kernels, ontology);
        PartInterface p2 = new Part("PIPE", kernels, ontology);

        p0.removeInstance(); // attempt to remove a not existing part from the ontology (a warning should occur).
        p0.addInstance(); // add a feature to the ontology.
        p1.addInstance(); // add another part to the ontology.
        p1.addInstance(); // attempt to add an already existing part to an ontology (a warning should occur).
        p0.removeInstance(); // remove a part from the ontology.

        p2.addInstance(); // add another part to the ontology.
        // remove a part from the ontology given its identifier.
        String p3InstanceName = p2.getID();
        PartOWL.removeInstance(ontology, p3InstanceName);
        System.out.println("INFO: removing part with name " + p3InstanceName + '.');

        ontology.saveOntology();
        System.out.println("INFO: Ontology saved in " + ontology.getOntologyPath() + ". " +
                "You should check that it represents only the " + p1.getID() + " part.");
    }
}